/***
* Grid.Mvc
* Examples and documentation at: http://gridmvc.codeplex.com
* Version: 3.0.0
* Requires: window.jQuery v1.3+
* LGPL license: http://gridmvc.codeplex.com/license
*/
window.pageGrids = window.pageGrids || {}; $.fn.extend({ gridmvc: function () { var e = []; $(this).each(function () { if (!$(this).data("gridmvc")) { var t = { lang: $(this).attr("data-lang"), selectable: $(this).attr("data-selectable") == "true", multiplefilters: $(this).attr("data-multiplefilters") == "true" }; var n = new GridMvc(this, t); var r = $(this).attr("data-gridname"); if (r.length > 0) window.pageGrids[$(this).attr("data-gridname")] = n; e.push(n); $(this).data("gridmvc", n) } else { e.push($(this).data("gridmvc")) } }); if (e.length == 1) return e[0]; return e } }); GridMvc = function (e) { function t(t, n) { this.jqContainer = e(t); n = n || {}; this.options = e.extend({}, this.defaults(), n); this.init() } t.prototype.init = function () { this.lang = GridMvc.lang[this.options.lang]; if (typeof this.lang == "undefined") this.lang = GridMvc.lang.en; this.events = []; if (this.options.selectable) this.initGridRowsEvents(); this.filterWidgets = []; this.addFilterWidget(new TextFilterWidget); this.addFilterWidget(new NumberFilterWidget); this.addFilterWidget(new DateTimeFilterWidget); this.addFilterWidget(new BooleanFilterWidget); this.openedMenuBtn = null; this.initFilters() }; t.prototype.initGridRowsEvents = function () { var e = this; this.jqContainer.on("click", ".grid-row", function () { e.rowClicked.call(this, e) }) }; t.prototype.rowClicked = function (t) { if (!t.options.selectable) return; var n = e(this).closest(".grid-row"); if (n.length <= 0) return; var r = {}; n.find(".grid-cell").each(function () { var t = e(this).attr("data-name"); if (t.length > 0) r[t] = e(this).text() }); var i = e.Event("RowClicked"); t.notifyOnRowSelect(r, i); if (!i.isDefaultPrevented()) t.markRowSelected(n) }; t.prototype.markRowSelected = function (e) { this.jqContainer.find(".grid-row.grid-row-selected").removeClass("grid-row-selected"); e.addClass("grid-row-selected") }; t.prototype.defaults = function () { return { selectable: true, multiplefilters: false, lang: "en" } }; t.prototype.onRowSelect = function (e) { this.events.push({ name: "onRowSelect", callback: e }) }; t.prototype.notifyOnRowSelect = function (e, t) { t.row = e; this.notifyEvent("onRowSelect", t) }; t.prototype.notifyEvent = function (e, t) { for (var n = 0; n < this.events.length; n++) { if (this.events[n].name == e) if (!this.events[n].callback(t)) break } }; t.prototype.initFilters = function () { var t = this.filterMenuHtml(); var n = this; this.jqContainer.find(".grid-filter").each(function () { e(this).click(function () { return n.openFilterPopup.call(this, n, t) }) }) }; t.prototype.openFilterPopup = function (t, n) { var r = e(this).attr("data-type") || ""; var i = t.getFilterWidgetForType(r); if (i == null) return false; if (this.hasAttribute("data-rendered")) { var s = t.openMenuOnClick.call(this, t); t.setupPopupInitialPosition(e(this)); if (!s && typeof i.onShow != "undefined") i.onShow(); return s } var o = e(this).attr("data-name") || ""; var u = e(this).attr("data-filterdata") || ""; var a = t.parseFilterValues(u) || ""; var f = e(this).attr("data-url") || ""; e(this).attr("data-rendered", "1"); e(this).append(n); var l = e(this).find(".grid-popup-widget"); if (typeof i.onRender != "undefined") i.onRender(l, t.lang, r, a, function (e) { t.closeOpenedPopups(); t.applyFilterValues(f, o, e, false) }); if (e(this).find(".grid-filter-btn").hasClass("filtered") && i.showClearFilterButton()) { var c = e(this).find(".grid-popup-additional"); c.append(t.getClearFilterButton(f)); c.find(".grid-filter-clear").click(function () { t.applyFilterValues(f, o, "", true) }) } var h = t.openMenuOnClick.call(this, t); if (typeof i.onShow != "undefined") i.onShow(); t.setupPopupInitialPosition(e(this)); return h }; t.prototype.setupPopupInitialPosition = function (t) { function r() { var e = t.find(".grid-dropdown-arrow"); return { arrow: e, currentDropLeft: parseInt(n.css("left")), currentArrowLeft: parseInt(e.css("left")) } } var n = t.find(".grid-dropdown"); var i = n.offset().left; if (i < 0) { var s = r(); s.arrow.css({ left: s.currentArrowLeft + i - 10 + "px" }); n.css({ left: s.currentDropLeft - i + 10 + "px" }); return } var o = n.width(); var u = e(window).width() - (i + o); if (u < 0) { var s = r(); s.arrow.css({ left: s.currentArrowLeft - u + 10 + "px" }); n.css({ left: s.currentDropLeft + u - 10 + "px" }) } }; t.prototype.filterMenuHtml = function () { return '<div class="dropdown dropdown-menu grid-dropdown" style="display: none;">                    <div class="grid-dropdown-arrow"></div>                    <div class="grid-dropdown-inner">                            <div class="grid-popup-widget"></div>                            <div class="grid-popup-additional"></div>                    </div>                </div>' }; t.prototype.getClearFilterButton = function () { return '<ul class="menu-list">                    <li><a class="grid-filter-clear" href="javascript:void(0);">' + this.lang.clearFilterLabel + "</a></li>                </ul>" }; t.prototype.addFilterWidget = function (e) { this.filterWidgets.push(e) }; t.prototype.parseFilterValues = function (t) { var n = e.parseJSON(t); for (var r = 0; r < n.length; r++) { n[r].filterValue = this.urldecode(n[r].filterValue) } return n }; t.prototype.urldecode = function (e) { return decodeURIComponent((e + "").replace(/\+/g, "%20")) }; t.prototype.getFilterWidgetForType = function (t) { for (var n = 0; n < this.filterWidgets.length; n++) { if (e.inArray(t, this.filterWidgets[n].getAssociatedTypes()) >= 0) return this.filterWidgets[n] } return null }; t.prototype.replaceFilterWidget = function (t, n) { for (var r = 0; r < this.filterWidgets.length; r++) { if (e.inArray(t, this.filterWidgets[r].getAssociatedTypes()) >= 0) { this.filterWidgets.splice(r, 1); this.addFilterWidget(n); return true } } return false }; t.prototype.applyFilterValues = function (t, n, r, i) { var s = this.jqContainer.find(".grid-filter"); if (t.length > 0) t += "&"; var o = ""; if (!i) { o += this.getFilterQueryData(n, r) } if (this.options.multiplefilters) { for (var u = 0; u < s.length; u++) { if (e(s[u]).attr("data-name") != n) { var a = this.parseFilterValues(e(s[u]).attr("data-filterdata")); if (a.length == 0) continue; if (o.length > 0) o += "&"; o += this.getFilterQueryData(e(s[u]).attr("data-name"), a) } else { continue } } } window.location.search = t + o }; t.prototype.getFilterQueryData = function (e, t) { var n = ""; for (var r = 0; r < t.length; r++) { n += "grid-filter=" + encodeURIComponent(e) + "__" + t[r].filterType + "__" + encodeURIComponent(t[r].filterValue); if (r != t.length - 1) n += "&" } return n }; t.prototype.openMenuOnClick = function (t) { if (e(this).hasClass("clicked")) return true; t.closeOpenedPopups(); e(this).addClass("clicked"); var n = e(this).find(".dropdown-menu"); if (n.length == 0) return true; n.show(); n.addClass("opened"); t.openedMenuBtn = e(this); e(document).bind("click.gridmvc", function (e) { t.documentCallback(e, t) }); return false }; t.prototype.documentCallback = function (t, n) { t = t || event; var r = t.target || t.srcElement; var i = e(".dropdown-menu.opened").get(0); if (typeof i != "undefined") { do { if (i == r) { return } r = r.parentNode } while (r); i.style.display = "none"; e(i).removeClass("opened") } if (n.openedMenuBtn != null) n.openedMenuBtn.removeClass("clicked"); e(document).unbind("click.gridmvc") }; t.prototype.closeOpenedPopups = function () { var t = e(".dropdown-menu.opened"); t.hide(); t.removeClass("opened"); if (this.openedMenuBtn != null) this.openedMenuBtn.removeClass("clicked") }; t.prototype.selectable = function (e) { this.options.selectable = e }; return t }(window.jQuery); if (typeof GridMvc.lang == "undefined") GridMvc.lang = {}; GridMvc.lang.en = { filterTypeLabel: "Type: ", filterValueLabel: "Value:", applyFilterButtonText: "Apply", filterSelectTypes: { Equals: "Equals", StartsWith: "StartsWith", Contains: "Contains", EndsWith: "EndsWith", GreaterThan: "Greater than", LessThan: "Less than" }, code: "en", boolTrueLabel: "Yes", boolFalseLabel: "No", clearFilterLabel: "Clear filter" }; TextFilterWidget = function (e) { function t() { } t.prototype.getAssociatedTypes = function () { return ["System.String"] }; t.prototype.onShow = function () { var e = this.container.find(".grid-filter-input"); if (e.length <= 0) return; e.focus() }; t.prototype.showClearFilterButton = function () { return true }; t.prototype.onRender = function (e, t, n, r, i) { this.cb = i; this.container = e; this.lang = t; this.value = r.length > 0 ? r[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; t.prototype.renderWidget = function () { var e = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + (this.value.filterType == "1" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="2" ' + (this.value.filterType == "2" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Contains + '</option>                            <option value="3" ' + (this.value.filterType == "3" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.StartsWith + '</option>                            <option value="4" ' + (this.value.filterType == "4" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.EndsWith + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply" >' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(e) }; t.prototype.registerEvents = function () { var e = this.container.find(".grid-apply"); var t = this; e.click(function () { var e = t.container.find(".grid-filter-type").val(); var n = t.container.find(".grid-filter-input").val(); var r = [{ filterType: e, filterValue: n }]; t.cb(r) }); this.container.find(".grid-filter-input").keyup(function (t) { if (t.keyCode == 13) { e.click() } if (t.keyCode == 27) { GridMvc.closeOpenedPopups() } }) }; return t }(window.jQuery); NumberFilterWidget = function (e) { function t() { } t.prototype.showClearFilterButton = function () { return true }; t.prototype.getAssociatedTypes = function () { return ["System.Int32", "System.Double", "System.Decimal", "System.Byte", "System.Single", "System.Float", "System.Int64"] }; t.prototype.onShow = function () { var e = this.container.find(".grid-filter-input"); if (e.length <= 0) return; e.focus() }; t.prototype.onRender = function (e, t, n, r, i) { this.cb = i; this.container = e; this.lang = t; this.typeName = n; this.value = r.length > 0 ? r[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; t.prototype.renderWidget = function () { var e = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + (this.value.filterType == "1" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + (this.value.filterType == "5" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + (this.value.filterType == "6" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + '</option>                        </select>                    </div>                    <div class="form-group">                        <label>' + this.lang.filterValueLabel + '</label>                        <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                    </div>                    <div class="grid-filter-buttons">                        <button type="button" class="btn btn-primary grid-apply">' + this.lang.applyFilterButtonText + "</button>                    </div>"; this.container.append(e) }; t.prototype.registerEvents = function () { var e = this; var t = this.container.find(".grid-apply"); t.click(function () { var t = e.container.find(".grid-filter-type").val(); var n = e.container.find(".grid-filter-input").val(); var r = [{ filterType: t, filterValue: n }]; e.cb(r) }); var n = this.container.find(".grid-filter-input"); n.keyup(function (e) { if (e.keyCode == 13) { t.click() } if (e.keyCode == 27) { GridMvc.closeOpenedPopups() } }).keypress(function (t) { return e.validateInput.call(e, t) }); if (this.typeName == "System.Byte") n.attr("maxlength", "3") }; t.prototype.validateInput = function (e) { var t = e || window.event; var n = t.keyCode || t.which; n = String.fromCharCode(n); var r; switch (this.typeName) { case "System.Byte": case "System.Int32": case "System.Int64": r = /[0-9]/; break; default: r = /[0-9]|\.|\,/ } if (!r.test(n)) { t.returnValue = false; if (t.preventDefault) t.preventDefault() } }; return t }(window.jQuery); DateTimeFilterWidget = function (e) { function t() { } t.prototype.getAssociatedTypes = function () { return ["System.DateTime"] }; t.prototype.showClearFilterButton = function () { return true }; t.prototype.onRender = function (t, n, r, i, s) { this.jqUiIncluded = typeof e.datepicker != "undefined"; this.cb = s; this.container = t; this.lang = n; this.value = i.length > 0 ? i[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; t.prototype.renderWidget = function () { var t = '<div class="form-group">                        <label>' + this.lang.filterTypeLabel + '</label>                        <select class="grid-filter-type form-control">                            <option value="1" ' + (this.value.filterType == "1" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.Equals + '</option>                            <option value="5" ' + (this.value.filterType == "5" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.GreaterThan + '</option>                            <option value="6" ' + (this.value.filterType == "6" ? 'selected="selected"' : "") + ">" + this.lang.filterSelectTypes.LessThan + "</option>                        </select>                    </div>" + (this.jqUiIncluded ? '<div class="grid-filter-datepicker"></div>' : '<div class="form-group">                                <label>' + this.lang.filterValueLabel + '</label>                                <input type="text" class="grid-filter-input form-control" value="' + this.value.filterValue + '" />                             </div>                             <div class="grid-filter-buttons">                                <input type="button" class="btn btn-apply" value="' + this.lang.applyFilterButtonText + '" />                             </div>'); this.container.append(t); if (this.jqUiIncluded) { var n = this; var r = this.container.find(".grid-filter-datepicker"); r.datepicker({ onSelect: function (e) { var t = n.container.find(".grid-filter-type").val(); var r = [{ filterType: t, filterValue: e }]; n.cb(r) }, defaultDate: this.filterValue, changeMonth: true, changeYear: true }); if (typeof e.datepicker.regional[this.lang.code] != "undefined") { r.datepicker("option", e.datepicker.regional[this.lang.code]) } } }; t.prototype.registerEvents = function () { var e = this; var t = this.container.find(".btn-apply"); t.click(function () { var t = e.container.find(".grid-filter-type").val(); var n = e.container.find(".grid-filter-input").val(); var r = [{ filterType: t, filterValue: n }]; e.cb(r) }); this.container.find(".grid-filter-input").keyup(function (e) { if (e.keyCode == 13) { t.click() } }) }; return t }(window.jQuery); BooleanFilterWidget = function (e) { function t() { } t.prototype.getAssociatedTypes = function () { return ["System.Boolean"] }; t.prototype.showClearFilterButton = function () { return true }; t.prototype.onRender = function (e, t, n, r, i) { this.cb = i; this.container = e; this.lang = t; this.value = r.length > 0 ? r[0] : { filterType: 1, filterValue: "" }; this.renderWidget(); this.registerEvents() }; t.prototype.renderWidget = function () { var e = "<label>" + this.lang.filterValueLabel + '</label>                    <ul class="menu-list">                        <li><a class="grid-filter-choose ' + (this.value.filterValue == "true" ? "choose-selected" : "") + '" data-value="true" href="javascript:void(0);">' + this.lang.boolTrueLabel + '</a></li>                        <li><a class="grid-filter-choose ' + (this.value.filterValue == "false" ? "choose-selected" : "") + '" data-value="false" href="javascript:void(0);">' + this.lang.boolFalseLabel + "</a></li>                    </ul>"; this.container.append(e) }; t.prototype.registerEvents = function () { var t = this; var n = this.container.find(".grid-filter-choose"); n.click(function () { var n = [{ filterType: "1", filterValue: e(this).attr("data-value") }]; t.cb(n) }) }; return t }(window.jQuery); (function (e) { if (!e) return; e(function () { e(".grid-mvc").each(function () { e(".grid-mvc").gridmvc() }) }) })(window.jQuery)